─────────────────────────────────────────────────────────────
Lab: Formatting with printf
To advance the lab, select menu Help|Studio|Advance or the
corresponding shortcut.


── (1 of 34) Introduction ───────────────────────────────────
The printf package emulates the C printf and sprintf
functions.  It also contains a pair of adverbs (vsprintf and
vbsprintf) which convert printf specifications into verbs
that perform better on large operands, and a pair of verbs
(qprintf and qsprintf) for printing out debugging messages.

The package was contributed by Henry H. Rich
(glasss@bellsouth.net).

Example:
)
   load 'format/printf'
   'Today is %d/%d/%d' printf today =. 3 {. 6!:0 ''
Today is 2024/4/2
   qprintf 'today '
today=2024 4 2
   

── (2 of 34) Quick Summary ──────────────────────────────────
If you know printf in C, you can use J printf/sprintf
immediately.  The specification string is the left argument
to printf; the data to be substituted is a vector right
argument (if any of the elements are lists, the elements
should be boxed).

C features not supported:
 * width and precision specifiers
 %n field type

J features not in C:
 verbs in the field specifier, applied before formatting
 %j and %J field types, which mean J default formatting
 %S field type, which accepts a boxed list
 \l escape to produce LF
)
   'Using printf is easy as %d %d %d.' printf >: i. 3
Using printf is easy as 1 2 3.
   'Printed strings should be %s.' printf <'boxed'
Printed strings should be boxed.

── (3 of 34) Overview ───────────────────────────────────────
To use printf you give an example of the desired output, with
indications of where you want variable data to be inserted.
These indications, called fields, begin with the percent sign
% and end with a character that tells what type of conversion
is to be performed on the data.  The example string, called
the specification, is the left argument to printf.  The right
argument to printf is the data that is to be inserted.  The
fields are replaced by the corresponding data.  Examples:
)
   '%s, %s!' printf 'Hello';'world'
Hello, world!
   'A %s field and %d numeric field' printf 'string';1
A string field and 1 numeric field

── (4 of 34) Fields ─────────────────────────────────────────
A field has the form:

%[flags][width][.precision][?verb?]type

where the [] indicate optional elements, and there must be no
spaces.  The . and ? are punctuation that indicate the
presence of their component.  Omitted components assume a
default value, to be discussed later.  Examples:

 Field       Components
 -------------------------------
 %s          type=s
 %5d         width=5, type=d
 %.6f        precision=6, type=f
 %-?100*?f   verb='100* y', type=f, flags=-
)

── (5 of 34) Fields (ctd) ───────────────────────────────────
The components of a field control the formatting of the data
for the field.  When data is formatted, the order of
processing is:

 1.  The item is opened (i. e. unboxed)
 2.  The verb, if any, is applied
 3.  The conversion indicated by the type is performed
 4.  The precision is applied
 5.  The width is applied
 6.  The flags are applied

We will discuss the components one by one.
)

── (6 of 34) Verb ───────────────────────────────────────────
If ?verb? is given, that verb is applied to the data before
any further formatting.  Examples:
)
   '%.2?100*?f percent' printf 0.1
10.00 percent
   'The list contains %?#?d items' printf <1;2;3
The list contains 3 items

── (7 of 34) Type ───────────────────────────────────────────
The type, which is the only required component, indicates the
conversion that will be applied to the data.  We will now go
through the types.
)

── (8 of 34) Integer types ──────────────────────────────────
The types to use for displaying integers (or floating-point
numbers, which are truncated to integer) are:

 d decimal
 u unsigned 32-bit integer (not really meaningful in J)
 o octal
 x,X hexadecimal (using a-f or A-F)

Examples:
)
   '%d decimal is %o octal' printf 26 26
26 decimal is 32 octal
   '%d decimal is %x (or %X) hex' printf 26 26 26
26 decimal is 1a (or 1A) hex

── (9 of 34) Floating-point types ───────────────────────────
Floating-point numbers use types:

 f    integer.fraction form
 e,E  scientific notation (mmecc or mmEcc)
 g,G  like f unless the number is too big or too small;
       then like e,E

Examples:
)
   '%f is a middle-sized number' printf 50.5
50.500000 is a middle-sized number
   '%e (aka %E) looks ugly as %f' printf 1e8 1e8 1e8
 1.000000e8 (aka  1.000000E8) looks ugly as 100000000.000000
   'The system can choose for you: %g %g %g' printf 1e8 1e_8 1e2
The system can choose for you:  1.000000e8  1.000000e-8 100.000000

── (10 of 34) String types ──────────────────────────────────
String data can be displayed with the types

 s,c  string data

(The distinction in C between s and c types is meaningless in
J)

Example:
)
   'Field %s and field %c' printf 'one';'two'
Field one and field two

── (11 of 34) Special J types ───────────────────────────────
Printf in J recognizes 2 field types not available in C:

 j  apply J default formatting (using ":)
 J  apply J default formatting, and then flatten to string
 S  accept string or boxed list

The data item corresponding to S may be a string, in which
case S is identical to s type; or the data may be a boxed
list, in which case each boxed item is opened, formatted
using ":, and the results run together to form a string.

Examples:
)
   'Negative numbers use _ or -, as in %j and %d' printf _2 _2
Negative numbers use _ or -, as in _2 and -2
   'A boxed list: %S' printf < 'characters';'and';1;'number'
A boxed list: characters and 1 number

── (12 of 34) Special J types (ctd) ─────────────────────────
Field type J is useful for displaying boxed or high-rank
items.  A newline is inserted before each item and after the
entire list, and the list is raveled to a rank-1 string.

Example:
)
   'Boxed item:%JRank-2 item:%J' printf (<'aaa';'bbb');<i. 2 3
Boxed item:
┌─────────┐
│┌───┬───┐│
││aaa│bbb││
│└───┴───┘│
└─────────┘
Rank-2 item:
0 1 2
3 4 5


── (13 of 34) Precision ─────────────────────────────────────
The meaning of the precision component depends on the field
type:

 integer (duoxX): minimum number of digits.  The field is
extended if necessary (with '0' characters) to the length
given.  Default is 1.

 floating-point (feEgG): number of fractional digits to
display.  Default is 6.

 others (scSj): Maximum number of characters.  Strings longer
than the maximum are truncated.  Default is _ .

Examples:
)
   'Field extended to 5 digits: %.5d' printf 30
Field extended to 5 digits: 00030
   'Field with 2 decimal places: %.2f' printf 45.4567
Field with 2 decimal places: 45.46
   'A string of 3 characters: %.3s' printf <'categorical'
A string of 3 characters: cat

── (14 of 34) Width ─────────────────────────────────────────
The width component gives the minimum field width.  The value
after the precision is applied is extended to the minimum
width by adding spaces on the left (subject to control by the
flags, as discussed later).  The width component will not
shorten a string.

J printf does not support the variable-width specifier ('*')
of C.

Examples:
)
   'Minimum width 5: %5d.' printf 30
Minimum width 5:    30.
   'Minimum width 5: %5d.' printf 1234567
Minimum width 5: 1234567.

── (15 of 34) Width and precision on lists ──────────────────
The opened data item corresponding to an integer or
floating-point type may be a list.  In this case, the
precision is applied to each item of the list separately, the
results of that formatting are run together into a single
string (with one space between the items), and the width
component is applied to the entire result.  Examples:
)
   'A list of fractions: %.1f' printf <4 0.2 5.3
A list of fractions: 4.0 0.2 5.3
   'A list of fractions: %20.1f' printf <4 0.2 5.3
A list of fractions:          4.0 0.2 5.3

── (16 of 34) Flags ─────────────────────────────────────────
The flags component alters the display produced by the other
components.  There are 3 classes of flags: justification,
sign, and alternate-format.  At most one flag in each class
should be selected.
)

── (17 of 34) Flags: justification ──────────────────────────
If a width is specified, left-justification,
right-justification, or center-justification can be
selected:

 -  left-justification
 ^  centering
 (default) right justification

Examples:
)
   'Justification: %20s' printf <'right'
Justification:                right
   'Justification: %-20s' printf <'left'
Justification: left                
   'Justification: %^20s' printf <'center'
Justification:        center       

── (18 of 34) Flags: sign ───────────────────────────────────
By default, negative numbers have a '-' prefix and
nonnegative numbers have no prefix.  For types d, u, and f
only, the prefix for nonnegative numbers can be changed:

 +  use + prefix
 (space)  use space prefix

Examples:
)
   'Positive (%d) and negative (%d)' printf 5 _5
Positive (5) and negative (-5)
   'Positive (%+d) and negative (%+d)' printf 5 _5
Positive (+5) and negative (-5)
   'Positive (% d) and negative (% d)' printf 5 _5
Positive ( 5) and negative (-5)

── (19 of 34) Flags: alternate-format ───────────────────────
The alternate-format flag, #, changes the display of certain
types:

 o   the display is prefixed with '0'
 x,X the display is prefixed with '0x' or '0X'

Examples:
)
   'Normal %o and alternate %#o' printf 12 12
Normal 14 and alternate 014
   'Normal %x (%X) and alternate %#x (%#X)' printf 12 12 12 12
Normal c (C) and alternate 0xc (0XC)

── (20 of 34) Escape characters: % ──────────────────────────
To include a % character in the output, use the escape
sequence '%%'.  This produces a single '%' character and does
not count as a field.
)
   '%?100*?d%% complete.' printf 0.2
20% complete.

── (21 of 34) Escape characters: \ escapes ──────────────────
Certain non-printable characters are represented by escape
sequences:

 
  CRLF on Windows, LF on Unix
 	  TAB
   BS
   CR
   VT
 \l  LF
 \  \
 \'' '

Examples:
)
   'Line 1
Line 2' printf ''
Line 1
Line 2
   'The \ character is an escape

' printf ''
The \ character is an escape



── (22 of 34) Escape characters: \ octal ────────────────────
In addition, \(digits) is octal escape.  The longest sequence
of valid octal digits following the \, up to a maximum of 3
digits, is converted to a number, and that item of a. is the
character produced.  With octal escapes, any character can be
put into the specification.  Example:
)
   'Octal LF: \12Line 2' printf ''
Octal LF: 
Line 2

── (23 of 34) sprintf ───────────────────────────────────────
The verb sprintf is like printf, except that it prints
nothing and gives as a result the string after substitution.

sprintf has infinite rank, but it applies the formatting to
rank-1 lists of its inputs.

Examples:
)
   a =. 'Length of ''%s'' is %?#?j.' sprintf 'abc';'abc'
   a
Length of 'abc' is 3.
   b =. 'Length of ''%s'' is %?#?j.' sprintf ,.~ 'abc';'de';'fghi'
   b
Length of 'abc' is 3. 
Length of 'de' is 2.  
Length of 'fghi' is 4.
   b ,. '*'
Length of 'abc' is 3. *
Length of 'de' is 2.  *
Length of 'fghi' is 4.*

── (24 of 34) Performance ───────────────────────────────────
sprintf formats strings effectively, but a couple of factors
make it unsuitable for use on large lists:

 1. The results of the formatting are padded with blanks to
bring them to a common shape;

 2. If sprintf is applied at rank 1 to prevent the padding,
the specification string is parsed for every application of
sprintf.  Parsing the specification string will take much
more time than formatting the data.
)

── (25 of 34) Performance (ctd) ─────────────────────────────
For repeated application of sprintf, two adverbs are
provided.  Each adverb parses the specification string and
produces a verb that can be applied repeatedly with high
performance.

The adverb vsprintf yields a monadic verb that takes a list
of as many items as there are fields in the specification,
and produces a string result.

The adverb vbsprintf takes a list, each element of which is a
list of as many items as there are fields in the
specification, and produces a list of boxed strings as its
result.
)

── (26 of 34) vsprintf ──────────────────────────────────────
If the specification has 0 or 1 field, the rank of the verb
produced by vsprintf is 0.  Otherwise, its rank is 1.

vsprintf is useful when you want to perform some further
processing on each string - filling in a form with it, for
example.  For large lists vbsprintf is faster.
)
   fmt =. 'Name: %s value: %j' vsprintf
   'Rank of fmt is %j' printf {. fmt b. 0
Rank of fmt is 1
   smoutput@fmt 3 2 $ 'Able';1;'Baker';2;'Charlie';3
Name: Able value: 1
Name: Baker value: 2
Name: Charlie value: 3
   fmt0 =. 'Name: %s' vsprintf
   'Rank of fmt0 is %j' printf {. fmt0 b. 0
Rank of fmt0 is 0
   smoutput@fmt0 'Able';'Baker';'Charlie'
Name: Able
Name: Baker
Name: Charlie

── (27 of 34) vbsprintf ─────────────────────────────────────
If the specification has 0 or 1 field, the rank of the verb
produced by vbsprintf is 1.  Otherwise, its rank is 2.
)
   bfmt =. 'Name: %s value: %j
' vbsprintf
   'Rank of bfmt is %j' printf {. bfmt b. 0
Rank of bfmt is 2
   bfmt 3 2 $ 'Able';1;'Baker';2;'Charlie';3
┌────────────────────┬─────────────────────┬───────────────────────┐
│Name: Able value: 1 │Name: Baker value: 2 │Name: Charlie value: 3 │
└────────────────────┴─────────────────────┴───────────────────────┘
   ; bfmt 3 2 $ 'Able';1;'Baker';2;'Charlie';3
Name: Able value: 1
Name: Baker value: 2
Name: Charlie value: 3

   bfmt0 =. 'Name: %s ' vbsprintf
   'Rank of bfmt0 is %j' printf {. bfmt0 b. 0
Rank of bfmt0 is 1
   ; bfmt0 'Able';'Baker';'Charlie'
Name: Able Name: Baker Name: Charlie 
   smoutput@> bfmt0 'Able';'Baker';'Charlie'
Name: Able 
Name: Baker 
Name: Charlie 

── (28 of 34) Performance tips ──────────────────────────────
The %s and %j fields require the least processing.  If all
the fields in the specification are %s, vbsprintf uses a very
fast verb to format the data.  If all the fields are %s or
%j, vbsprintf uses a fast verb to format the data.  If other
types appear, vbsprintf applies conversions to each column
separately.
)

── (29 of 34) qprintf - typeout for debugging ───────────────
If you want the easiest way to display expressions, qprintf
may be the answer:
)
   vec =: 30 50 20
   qprintf 'vec {.vec <./vec '
vec=30 50 20 {.vec=30 <./vec=20

── (30 of 34) qprintf - typeout for debugging (ctd) ─────────
The right argument to qprintf is a string which contains a
list of expressions.  The last character of the string is the
delimiter between expressions.  The expressions are
separated, then executed.  The result is printed, preceded by
a label which is the expression itself, followed by '='.

Remember the delimiter!
)
   qprintf 'vec >./vec }:vec'  NB. oops
ve=  >./ve=  }:ve=
   qprintf 'vec >./vec }:vec '  NB. That's better
vec=30 50 20 >./vec=50 }:vec=30 50
   qprintf 'vec!(+/ % #)vec!'  NB. Any character is OK
vec=30 50 20 (+/ % #)vec=33.3333

── (31 of 34) qprintf - custom labels ───────────────────────
If you want to change the default label ' expr=', you may
include a label before the expression.  If the expression
contains '?', only the part after the last '?' is evaluated,
and the part before the last '?' is used as the label.
)
   qprintf 'vec!, mean=?(+/ % #)vec!'
vec=30 50 20, mean=33.3333

── (32 of 34) qprintf - custom field specifications ─────────
The left argument to qprintf is the list of field
specifications to use (it is repeated as often as necessary).
 It may be specified as a boxed list or a string; if a
string, the field specifications start with '%'.  The default
specification is '%J'.
)
   qprintf 'vec '
vec=30 50 20
   '%5.2f' qprintf 'vec '
vec=30.00 50.00 20.00

── (33 of 34) qsprintf ──────────────────────────────────────
qsprintf is like qprintf, but it returns the string as a
result rather than printing it.
)

── (34 of 34) Summary of types ──────────────────────────────
 c   character
 s   a string
 S   a boxed list
 j   J default formatting
 J   J default formatting, flattened to a character string
 d   a signed integer, in decimal
 u   an unsigned 32-bit integer, in decimal
 o   an unsigned 32-bit integer, in octal
 x   an unsigned 32-bit integer, in hexadecimal
 X   like %x, but using upper-case letters
 e   a floating-point number, in scientific notation
 E   like %e, but using an upper-case "E"
 f   floating-point number, in fixed decimal notation
 g   floating-point number, in %e or %f notation
 G   as %g, but with an upper-case "E" (if applicable)
)

End of lab
   
